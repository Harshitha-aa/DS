#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Employee {
    int id;
    char name[50];
    float hoursWorked;
    char project[50];
    float overtime;
};

// Function to calculate overtime
void calculateOvertime(struct Employee* e) {
    if (e->hoursWorked > 40)
        e->overtime = e->hoursWorked - 40;
    else
        e->overtime = 0;
}

// Function to sort employees by hours worked (descending)
void sortByHours(struct Employee* emp, int n) {
    struct Employee temp;
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (emp[i].hoursWorked < emp[j].hoursWorked) {
                temp = emp[i];
                emp[i] = emp[j];
                emp[j] = temp;
            }
        }
    }
}

int main() {
    struct Employee* emp = NULL;
    int n, i;

    printf("Enter number of employees: ");
    scanf("%d", &n);

    // Allocate memory using malloc
    emp = (struct Employee*)malloc(n * sizeof(struct Employee));
    if (emp == NULL) {
        printf("Memory allocation failed!\n");
        return 1;
    }

    // Input details
    for (i = 0; i < n; i++) {
        printf("\nEnter details for Employee %d:\n", i + 1);
        printf("ID: ");
        scanf("%d", &emp[i].id);
        printf("Name: ");
        scanf(" %[^\n]", emp[i].name);
        printf("Total Hours Worked: ");
        scanf("%f", &emp[i].hoursWorked);
        printf("Project: ");
        scanf(" %[^\n]", emp[i].project);

        calculateOvertime(&emp[i]);
    }

    // Reallocate if user wants to add more employees
    char choice;
    printf("\nDo you want to add more employees? (y/n): ");
    scanf(" %c", &choice);

    if (choice == 'y' || choice == 'Y') {
        int more;
        printf("How many more employees do you want to add? ");
        scanf("%d", &more);

        struct Employee* temp = realloc(emp, (n + more) * sizeof(struct Employee));
        if (temp == NULL) {
            printf("Reallocation failed!\n");
            free(emp);
            return 1;
        }
        emp = temp;

        // Input new employee details
        for (i = n; i < n + more; i++) {
            printf("\nEnter details for Employee %d:\n", i + 1);
            printf("ID: ");
            scanf("%d", &emp[i].id);
            printf("Name: ");
            scanf(" %[^\n]", emp[i].name);
            printf("Total Hours Worked: ");
            scanf("%f", &emp[i].hoursWorked);
            printf("Project: ");
            scanf(" %[^\n]", emp[i].project);

            calculateOvertime(&emp[i]);
        }
        n += more;
    }

    // Display all employee info
    printf("\nEmployee Details with Overtime:\n");
    for (i = 0; i < n; i++) {
        printf("\nID: %d\nName: %s\nHours Worked: %.2f\nProject: %s\nOvertime: %.2f\n",
            emp[i].id, emp[i].name, emp[i].hoursWorked, emp[i].project, emp[i].overtime);
    }

    // Top 3 hard workers
    sortByHours(emp, n);

    printf("\nTop 3 Hard Workers:\n");
    for (i = 0; i < n && i < 3; i++) {
        printf("%d. %s - %.2f hours\n", i + 1, emp[i].name, emp[i].hoursWorked);
    }

    // Free memory
    free(emp);

    return 0;
}
